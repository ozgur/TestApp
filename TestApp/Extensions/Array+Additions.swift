//
//  Array+Additions.swift
//  TestApp
//
//  Created by Ozgur on 19/01/2017.
//  Copyright Â© 2017 Ozgur. All rights reserved.
//

import Foundation

extension Array {
  /**
   Gets the index of the last occurrence of item, if found.
   
   - parameter item: The item to search for
   - returns: Index of the matched item or nil
   */
  func lastIndexOf <U: Equatable> (_ item: U) -> Int? {
    if item is Element {
      for (index, value) in reversed().enumerated() {
        if value as! U == item {
          return count - 1 - index
        }
      }
      
      return nil
    }
    return nil
  }
  
  /**
   Union of self and the input arrays.
   
   - parameter values: Arrays
   - returns: Union array of unique values
   */
  func union <U: Equatable> (_ values: [U]...) -> Array {
    var result = self
    
    for array in values {
      for value in array {
        if !result.contains(value) {
          result.append(value as! Element)
        }
      }
    }
    return result
  }
  
  /**
   Checks if self contains a list of items.
   
   - parameter items: Items to search for
   - returns: true if self contains all the items
   */
  func contains <Element: Equatable> (_ items: Element...) -> Bool {
    return items.all { (item: Element) -> Bool in indexOf(item) ?? 0 >= 0 }
  }
  
  /**
   Works like the default `first` method, but returns also the index.
   Index is returned NSNotFound in case item is not found.
   
   - parameter predicate: predicate function to find
   - returns: the item found with the index.
   */
  func first(where predicate: (Element) throws -> Bool) rethrows -> (Int, Element?) {
    for (index, item) in enumerated() {
      if try predicate(item) {
        return (index, item)
      }
    }
    return (NSNotFound, nil)
  }


  /**
   Index of the first occurrence of item, if found.
   
   - parameter item: The item to search for
   - returns: Index of the matched item or nil
   */
  func indexOf <U: Equatable> (_ item: U) -> Int? {
    if item is Element {
      return index(where: { (object) -> Bool in
        return (object as! U) == item
      })
    }
    return nil
  }
  
  /**
   Checks if test returns true for all the elements in self
   
   - parameter test: Function to call for each element
   - returns: True if test returns true for all the elements in self
   */
  func all (_ test: (Element) -> Bool) -> Bool {
    for item in self {
      if !test(item) {
        return false
      }
    }
    return true
  }
  
  /**
   Checks if test returns true for any element in self
   
   - parameter test: Function to call for each element
   - returns: True if test returns true for any element in self
   */
  func any (_ test: (Element) -> Bool) -> Bool {
    for item in self {
      if test(item) {
        return true
      }
    }
    return false
  }
  
  /**
   Returns false if test returns true for any element in self
   
   - parameter test: Function to call for each element
   - returns: True if test returns false for all the elements in self
   */
  func never(_ test: (Element) -> Bool) -> Bool {
    for item in self {
      if test(item) {
        return false
      }
    }
    return true
  }
  
  /**
   Removes all elements from the array that returns true for
   given test function.
   
   - parameter test: Function to call for each element
   - returns: A new array containing elements that haven't passed the test.
   */
  func ignore(_ test: (Element) -> Bool) -> [Element] {
    return filter({ element in
      return !test(element)
    })
  }
  
  /**
   Creates an array with values generated by running each value of self
   through the mapFunction and discarding nil return values.
   
   - parameter mapFunction:
   - returns: Mapped array
   */
  func mapFilter <V> (mapFunction map: (Element) -> (V)?) -> [V] {
    var mapped = [V]()
    each { (value: Element) -> Void in
      if let mappedValue = map(value) {
        mapped.append(mappedValue)
      }
    }
    return mapped
  }
  
  /**
   Iterates on each element of the array.
   
   - parameter call: Function to call for each element
   - returns: foo
   */
  func each (_ call: (Element) -> ()) {
    for item in self {
      call(item)
    }
  }
  
  /**
   Iterates on each element of the array with its index.
   
   - parameter call: Function to call for each element
   - returns: foo
   */
  func each (call: (Int, Element) -> ()) {
    for (index, item) in enumerated() {
      call(index, item)
    }
  }
  
  /**
   Deletes all the items in self that are equal to element.
   
   - parameter element: Element to remove
   */
  mutating func remove <U: Equatable> (_ element: U) {
    let anotherSelf = self
    
    removeAll(keepingCapacity: true)
    
    anotherSelf.each {
      (index: Int, current: Element) in
      if (current as! U) != element {
        append(current)
      }
    }
  }
  
  mutating func fill<S: Sequence>(withContentsOf: S) where S.Iterator.Element == Element {
    removeAll()
    append(contentsOf: withContentsOf)
  }
  
  /**
   Gets the object at the specified index, if it exists.
   
   - parameter index:
   - returns: Object at index in self
   */
  func get (_ index: Int) -> Element? {
    return index >= 0 && index < count ? self[index] : nil
  }
  
  /**
   Gets the objects in the specified range.
   
   - parameter range:
   - returns: Subarray in range
   */
  func get (_ range: Range<Int>) -> Array {
    return Array(self[range])
  }
}
